{
  "examples/kernels": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nsample = np.sin(np.arange(0,15) / np.pi) + .1\noos = np.sin(np.arange(15,30) / np.pi) + .1\n\nk = kerch.kernel.factory(type=\"polynomial\", sample=sample, center=True, normalize=True)\n\nfig, axs = plt.subplots(2,2)\n\naxs[0,0].imshow(k.K, vmin=-1, vmax=1)\naxs[0,0].set_title(\"Sample -Sample\")\n\naxs[0,1].imshow(k.k(y=oos), vmin=-1, vmax=1)\naxs[0,1].set_title(\"Sample - OOS\")\n\naxs[1,0].imshow(k.k(x=oos), vmin=-1, vmax=1)\naxs[1,0].set_title(\"OOS - Sample\")\n\nim = axs[1,1].imshow(k.k(x=oos, y=oos), vmin=-1, vmax=1)\naxs[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist())",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "factory"
          ],
          "code_str": "kerch.kernel.factory",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.factory"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "factory",
            "()"
          ],
          "code_str": "k",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.kernel.Kernel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "examples/kernels",
        "ref_id": "out-of-sample-normalized-and-centered-kernels",
        "headings": [
          "Using Kernels",
          "Out-of-sample normalized and centered kernels"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "examples/levels": [],
  "examples/models": [],
  "features/cache": [
    {
      "source": "kpca_light_cache.print_cache()",
      "names": [],
      "example": {
        "document": "features/cache",
        "ref_id": "kpca",
        "headings": [
          "Cache Management",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 188
    },
    {
      "source": "kpca_light_cache.solve()\nkpca_light_cache.forward(oos)\nkpca_light_cache.print_cache()",
      "names": [],
      "example": {
        "document": "features/cache",
        "ref_id": "kpca",
        "headings": [
          "Cache Management",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 217
    },
    {
      "source": "kpca_light_cache.reset()\nkpca_light_cache.print_cache()",
      "names": [],
      "example": {
        "document": "features/cache",
        "ref_id": "kpca",
        "headings": [
          "Cache Management",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 244
    },
    {
      "source": "kpca_total_cache.print_cache()",
      "names": [],
      "example": {
        "document": "features/cache",
        "ref_id": "kpca",
        "headings": [
          "Cache Management",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 269
    },
    {
      "source": "kpca_total_cache.solve()\nkpca_total_cache.forward(oos)\nkpca_total_cache.print_cache()",
      "names": [],
      "example": {
        "document": "features/cache",
        "ref_id": "kpca",
        "headings": [
          "Cache Management",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 295
    },
    {
      "source": "kpca_total_cache.reset()\nkpca_total_cache.print_cache()",
      "names": [],
      "example": {
        "document": "features/cache",
        "ref_id": "kpca",
        "headings": [
          "Cache Management",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 323
    },
    {
      "source": "import kerch\nimport torch\nimport time\n\nclass MyCacheExample(kerch.feature.Cache):\n    def __init__(self, *args, **kwargs):\n        super(MyCacheExample, self).__init__(*args, **kwargs)\n        self.big_matrix = kwargs.pop('big_matrix')\n\n    def _compute_qr(self):\n        def qr_fun():\n            return torch.linalg.qr(self.big_matrix)\n        return self._get(key='qr', fun=qr_fun)\n\n    @property\n    def Q(self):\n        q, r = self._compute_qr()\n        return q\n\n    @property\n    def R(self):\n        q, r = self._compute_qr()\n        return r\n\n# we instantiate our new class\nm = torch.randn(200, 100)\nmy_example = MyCacheExample(big_matrix=m)\n\n# we time our Q property\nstart = time.time()\nmy_example.Q\nend = time.time()\nprint('First access: ' + str(end-start), end='\\n\\n')\n\n# we time it again\nstart = time.time()\nmy_example.Q\nend = time.time()\nprint('Second access: ' + str(end-start), end='\\n\\n')\n\n# we now have a look at our cache\nmy_example.print_cache()",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "time"
          ],
          "code_str": "time",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "time"
        },
        {
          "import_components": [
            "kerch",
            "feature",
            "Cache"
          ],
          "code_str": "kerch.feature.Cache",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "kerch.feature.cache.Cache"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "torch",
            "linalg",
            "qr"
          ],
          "code_str": "torch.linalg.qr",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "torch.linalg.qr"
        },
        {
          "import_components": [
            "property"
          ],
          "code_str": "property",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "property"
        },
        {
          "import_components": [
            "property"
          ],
          "code_str": "property",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "property"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "time",
            "time"
          ],
          "code_str": "time.time",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "time.time"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 39,
          "end_lineno": 39,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/cache",
        "ref_id": "managing-the-cache",
        "headings": [
          "Cache Management",
          "Examples",
          "Managing the Cache"
        ]
      },
      "doc_lineno": 376
    }
  ],
  "features/cache_levels/kernel": [],
  "features/cache_levels/level": [],
  "features/cache_levels/sample": [],
  "features/cache_levels/transform": [],
  "features/index": [],
  "features/logger": [
    {
      "source": "import kerch\nimport logging\n\nkerch.set_logging_level(logging.DEBUG)",
      "names": [
        {
          "import_components": [
            "logging"
          ],
          "code_str": "logging",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "logging"
        },
        {
          "import_components": [
            "logging",
            "DEBUG"
          ],
          "code_str": "logging.DEBUG",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "logging.DEBUG"
        },
        {
          "import_components": [
            "kerch",
            "set_logging_level"
          ],
          "code_str": "kerch.set_logging_level",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.set_logging_level"
        }
      ],
      "example": {
        "document": "features/logger",
        "ref_id": "default-logging-level",
        "headings": [
          "Logging in Kerch",
          "Functionalities",
          "Default Logging Level"
        ]
      },
      "doc_lineno": 8
    },
    {
      "source": "import kerch\nimport logging\n\ndefault_level = kerch.get_logging_level()\ndefault_level = logging.getLevelName(default_level)\nprint(default_level)",
      "names": [
        {
          "import_components": [
            "logging"
          ],
          "code_str": "logging",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "logging"
        },
        {
          "import_components": [
            "kerch",
            "get_logging_level"
          ],
          "code_str": "kerch.get_logging_level",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.get_logging_level"
        },
        {
          "import_components": [
            "logging",
            "getLevelName"
          ],
          "code_str": "logging.getLevelName",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "logging.getLevelName"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/logger",
        "ref_id": "default-logging-level",
        "headings": [
          "Logging in Kerch",
          "Functionalities",
          "Default Logging Level"
        ]
      },
      "doc_lineno": 12
    },
    {
      "source": "import kerch\nimport logging\n\nclass MyClass(kerch.feature.Logger):\n    def __init__(self, *args, **kwargs):\n        super(MyClass, self).__init__(*args, **kwargs)\n        self._logger.info('Instantiation done information.')\n        self._logger.warn('Instantiation done warning.')\n\nprint('First class with default logging level:')\nmy_class1 = MyClass()\n\nprint('\\nSecond instance with logging.INFO logging level:')\nmy_class2 = MyClass(logging_level=logging.INFO)",
      "names": [
        {
          "import_components": [
            "logging"
          ],
          "code_str": "logging",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "logging"
        },
        {
          "import_components": [
            "kerch",
            "feature",
            "Logger"
          ],
          "code_str": "kerch.feature.Logger",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.feature.logger.Logger"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "logging",
            "INFO"
          ],
          "code_str": "logging.INFO",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "logging.INFO"
        }
      ],
      "example": {
        "document": "features/logger",
        "ref_id": "abstract-class",
        "headings": [
          "Logging in Kerch",
          "Abstract Class"
        ]
      },
      "doc_lineno": 26
    },
    {
      "source": "import kerch\n\nk = kerch.kernel.RBF()\nk.sample = range(3)\nprint(k.K)                                          # first warning (the sigma is defined)",
      "names": [
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/logger",
        "ref_id": "default",
        "headings": [
          "Logging in Kerch",
          "Example",
          "Default"
        ]
      },
      "doc_lineno": 79
    },
    {
      "source": "import kerch\nimport logging\n\nk = kerch.kernel.RBF(logging_level=logging.INFO)    # first info (no sample initialized yet)\nk.sample = range(3)                                 # second info (the sample is initialized)\nprint(k.K)                                          # first warning (the sigma is defined)",
      "names": [
        {
          "import_components": [
            "logging"
          ],
          "code_str": "logging",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "logging"
        },
        {
          "import_components": [
            "logging",
            "INFO"
          ],
          "code_str": "logging.INFO",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "logging.INFO"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/logger",
        "ref_id": "info",
        "headings": [
          "Logging in Kerch",
          "Example",
          "Info"
        ]
      },
      "doc_lineno": 98
    }
  ],
  "features/module": [
    {
      "source": "# Euclidean parameters\nprint('EUCLIDEAN PARAMETERS:')\nfor p in kpca.manifold_parameters(type='euclidean'):\n    print(p)\n\n# Stiefel parameters\nprint('\\nSTIEFEL PARAMETERS:')\nfor p in kpca.manifold_parameters(type='stiefel'):\n    print(p)\n\n# Slow (Euclidean) parameters\nprint('\\nSLOW (EUCLIDEAN) PARAMETERS:')\nfor p in kpca.manifold_parameters(type='slow'):\n    print(p)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/module",
        "ref_id": "kpca",
        "headings": [
          "Kerch Module",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 125
    },
    {
      "source": "print('FIXED HYPERPARAMETERS:')\nfor key, value in kpca.hparams_fixed.items():\n    print(key, \":\", value)\n\nprint('\\nVARIABLE HYPERPARAMETERS:')\nfor key, value in kpca.hparams_variable.items():\n    print(key, \":\", value)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/module",
        "ref_id": "kpca",
        "headings": [
          "Kerch Module",
          "Examples",
          "KPCA"
        ]
      },
      "doc_lineno": 155
    },
    {
      "source": "# Euclidean parameters\nprint('EUCLIDEAN PARAMETERS:')\nfor p in my_module.manifold_parameters(type='euclidean'):\n    print(p)\n\n# Stiefel parameters\nprint('\\nSTIEFEL PARAMETERS:')\nfor p in my_module.manifold_parameters(type='stiefel'):\n    print(p)\n\n# Slow (Euclidean) parameters\nprint('\\nSLOW (EUCLIDEAN) PARAMETERS:')\nfor p in my_module.manifold_parameters(type='slow'):\n    print(p)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/module",
        "ref_id": "creating-a-module",
        "headings": [
          "Kerch Module",
          "Examples",
          "Creating a Module"
        ]
      },
      "doc_lineno": 265
    },
    {
      "source": "# we suppose that an optimization step has been performed\nmy_module.after_step()\n\n# Euclidean parameters\nprint('EUCLIDEAN PARAMETERS:')\nfor p in my_module.manifold_parameters(type='euclidean'):\n    print(p)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/module",
        "ref_id": "creating-a-module",
        "headings": [
          "Kerch Module",
          "Examples",
          "Creating a Module"
        ]
      },
      "doc_lineno": 318
    },
    {
      "source": "print('FIXED HYPERPARAMETERS:')\nfor key, value in my_module.hparams_fixed.items():\n    print(key, \":\", value)\n\nprint('\\nVARIABLE HYPERPARAMETERS:')\nfor key, value in my_module.hparams_variable.items():\n    print(key, \":\", value)",
      "names": [
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "print"
        },
        {
          "import_components": [
            "print"
          ],
          "code_str": "print",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "print"
        }
      ],
      "example": {
        "document": "features/module",
        "ref_id": "creating-a-module",
        "headings": [
          "Kerch Module",
          "Examples",
          "Creating a Module"
        ]
      },
      "doc_lineno": 371
    }
  ],
  "features/sample": [],
  "features/stochastic": [],
  "features/transform": [],
  "general/contribute": [],
  "general/first_steps": [],
  "general/index": [],
  "general/install": [],
  "kernel/abstract/distance": [
    {
      "source": "import kerch\nimport torch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# we define our l1 kernel\nclass MyExponential(kerch.kernel.Exponential):\n    def _dist(self, x, y):\n        # x: torch.Tensor of size [num_x, dim]\n        # y: torch.Tensor of size [num_y, dim]\n        x = x.T[:, :, None]\n        y = y.T[:, None, :]\n\n        diff = x - y\n\n        # return torch.Tensor of size [num_x, num_y]\n        return torch.sum(torch.abs(diff), dim=0, keepdim=False)\n\n# we define our sample\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\n# now we can just use the kernel\nk = MyExponential(sample=sample)\n\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Sigma = \"+str(k.sigma))\n\nk.sigma = 1\n\nplt.figure(2)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Sigma = \"+str(k.sigma))",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "torch",
            "abs"
          ],
          "code_str": "torch.abs",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "torch.abs"
        },
        {
          "import_components": [
            "torch",
            "sum"
          ],
          "code_str": "torch.sum",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "torch.sum"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "expand_dims"
          ],
          "code_str": "np.expand_dims",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "numpy.expand_dims"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "concatenate"
          ],
          "code_str": "np.concatenate",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.concatenate"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 28,
          "end_lineno": 28,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/abstract/distance",
        "ref_id": "minimal-example",
        "headings": [
          "Distance-Based Kernel",
          "Defining a New Kernel",
          "Minimal Example"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "# we define the sample\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\n# we also define an out_of_sample\nt_oos = np.expand_dims(np.arange(15,30), axis=1)\noos = np.concatenate((np.sin(t_oos / np.pi) + 1, np.cos(t_oos / np.pi) - 1), axis=1)\n\n# we initialize our new kernel\nk = MyExponential(sample=sample, sample_transform=['minmax_rescaling'], kernel_transform=['center'])\n\n# sample\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(sample)\naxs[0].set_title(\"Original\")\nim = axs[1].imshow(k.current_sample_projected)\naxs[1].set_title(\"Transformed\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\nfig.suptitle('Sample')\n\n# out-of-sample\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(oos)\naxs[0].set_title(\"Original\")\nim = axs[1].imshow(k.transform_input(oos))\naxs[1].set_title(\"Transformed\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\nfig.suptitle('Out-of-Sample')\n\n# kernel matrix\nfig, axs = plt.subplots(2,2)\nfig.suptitle('Kernel Matrix')\n\naxs[0,0].imshow(k.K, vmin=-1, vmax=1)\naxs[0,0].set_title(\"Sample - Sample\")\n\naxs[0,1].imshow(k.k(y=oos), vmin=-1, vmax=1)\naxs[0,1].set_title(\"Sample - OOS\")\n\naxs[1,0].imshow(k.k(x=oos), vmin=-1, vmax=1)\naxs[1,0].set_title(\"OOS - Sample\")\n\nim = axs[1,1].imshow(k.k(x=oos, y=oos), vmin=-1, vmax=1)\naxs[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist())",
      "names": [],
      "example": {
        "document": "kernel/abstract/distance",
        "ref_id": "minimal-example",
        "headings": [
          "Distance-Based Kernel",
          "Defining a New Kernel",
          "Minimal Example"
        ]
      },
      "doc_lineno": 88
    },
    {
      "source": "# we define our l1 kernel\nclass MyExponential(kerch.kernel.Exponential):\n    def __init__(self, *args, **kwargs):\n        super(MyExponential, self).__init__(*args, **kwargs)\n\n        # all parameters are typically passed through the keyword arguments kwargs\n        degree = kwargs.pop('degree', 1)\n\n        # we ensure that is a torch value of the correct data type used by kerch (modifiable)\n        degree = kerch.utils.castf(degree, tensor=False)\n\n        # we now store it as a parameter, tu ensure that the values are ported over when changing the device\n        # ! due to the nature of PyTorch, parameters can only be added after the call to super.\n        self.degree = torch.nn.Parameter(degree, requires_grad=False)\n\n    def __str__(self):\n        # it is always nicer to add a name to the kernel (it must begin with small letters, the capitalization is automatic)\n        # this also has an influence on the __repr__ attribute\n        return \"l1 exponential kernel\"\n\n    @property\n    def hparams(self) -> dict():\n        # this returns a dictionary containing the properties\n        # it is important to call the super to also pass the other parameters like the sigma etc.\n        return {'Kernel': 'L1 Exponential',\n                'Degree': self.degree.detach().cpu().item().numpy()\n                **super(MyExponential, self).hparams}\n\n\n    def _dist(self, x, y):\n        # x: torch.Tensor of size [num_x, self.dim_input]\n        # y: torch.Tensor of size [num_y, self.dim_input]\n        x = x.T[:, :, None]\n        y = y.T[:, None, :]\n\n        diff = x - y\n\n        # return torch.Tensor of size [num_x, num_y]\n        return torch.sum(torch.abs(diff)**self.degree, dim=0, keepdim=False)",
      "names": [
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "property"
          ],
          "code_str": "property",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "property"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "super"
        }
      ],
      "example": {
        "document": "kernel/abstract/distance",
        "ref_id": "extensive-example",
        "headings": [
          "Distance-Based Kernel",
          "Defining a New Kernel",
          "Extensive Example"
        ]
      },
      "doc_lineno": 218
    },
    {
      "source": "# we define our l1 kernel\nclass MyL1Distance(kerch.kernel.Distance):\n    def __init__(self, *args, **kwargs):\n        super(kerch.kernel.Distance, self).__init__(*args, **kwargs)\n\n    def _dist(self, x, y):\n        # x: torch.Tensor of size [num_x, dim]\n        # y: torch.Tensor of size [num_y, dim]\n        x = x.T[:, :, None]\n        y = y.T[:, None, :]\n\n        diff = x - y\n\n        # return torch.Tensor of size [num_x, num_y]\n        return torch.sum(torch.abs(diff), dim=0, keepdim=False)\n\n\n# we define out kernel that is going to use the distances\nclass MyKernel(kerch.kernel.SelectDistance):\n    def __init__(self, *args, **kwargs):\n        super(kerch.kernel.SelectDistance, self).__init__(*args, **kwargs)\n\n    def _implicit(self, x, y):\n        # x: torch.Tensor of size [num_x, dim]\n        # y: torch.Tensor of size [num_y, dim]\n        # return torch.Tensor of size [num_x, num_y]\n        return -self._dist(x, y)\n\n# we define our sample\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\n# we define our two kernels, the first one with our defined distance, the second one with a pre-defined distance\nk1 = MyKernel(sample=sample, distance=MyL1Distance)\nk2 = MyKernel(sample=sample, distance='euclidean')\n\n# plot\nplt.figure(1)\nplt.imshow(k1.K)\nplt.colorbar()\nplt.title(\"L1\")\n\nplt.figure(2)\nplt.imshow(k2.K)\nplt.colorbar()\nplt.title(\"L2\")",
      "names": [
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "super"
        }
      ],
      "example": {
        "document": "kernel/abstract/distance",
        "ref_id": "example-without-an-exponential",
        "headings": [
          "Distance-Based Kernel",
          "Defining a New Kernel",
          "Example without an Exponential"
        ]
      },
      "doc_lineno": 267
    }
  ],
  "kernel/abstract/explicit": [
    {
      "source": "import kerch\nimport torch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# we define our new kernel\nclass MyExplicit(kerch.kernel.Explicit):\n    def _explicit(self, x):\n        # x: torch.Tensor of size [num, self.dim_input]\n        phi1 = x                                                    # [num, self.dim_input]\n        phi2 = x ** 2                                               # [num, self.dim_input]\n        phi3 = torch.log(torch.sum(x * x, dim=1, keepdim=True)+1)   # [num, 1]\n\n        phi = torch.cat((phi1, phi2, phi3), dim=1)                  # [num, 2*self.dim_input + 1]\n\n        # return torch.Tensor of size [num, self.dim_feature]\n        # if not specified (see further), self.dim_feature will be determined automatically\n        return phi\n\n# now we can just use the kernel\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\nk = MyExplicit(sample=sample)\n\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(sample)\naxs[0].set_title(\"Sample\")\nim = axs[1].imshow(k.Phi)\naxs[1].set_title(\"Feature Map\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\n\nplt.figure()\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Kernel Matrix\")",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Explicit"
          ],
          "code_str": "kerch.kernel.Explicit",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.explicit.Explicit"
        },
        {
          "import_components": [
            "torch",
            "sum"
          ],
          "code_str": "torch.sum",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "torch.sum"
        },
        {
          "import_components": [
            "torch",
            "log"
          ],
          "code_str": "torch.log",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "torch.log"
        },
        {
          "import_components": [
            "torch",
            "cat"
          ],
          "code_str": "torch.cat",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "torch.cat"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "expand_dims"
          ],
          "code_str": "np.expand_dims",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.expand_dims"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "concatenate"
          ],
          "code_str": "np.concatenate",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.concatenate"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/abstract/explicit",
        "ref_id": "minimal-example",
        "headings": [
          "Explicit Kernel",
          "Defining a New Kernel",
          "Minimal Example"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "# we define the sample\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\n# we also define an out_of_sample\nt_oos = np.expand_dims(np.arange(15,30), axis=1)\noos = np.concatenate((np.sin(t_oos / np.pi) + 1, np.cos(t_oos / np.pi) - 1), axis=1)\n\n# we initialize our new kernel\nk = MyExplicit(sample=sample, sample_transform=['minmax_rescaling'], kernel_transform=['standard'])\n\n# sample\nfig, axs = plt.subplots(1,3)\naxs[0].imshow(sample)\naxs[0].set_title(\"Original\")\naxs[1].imshow(k.current_sample_projected)\naxs[1].set_title(\"Transformed\")\nim = axs[2].imshow(k.Phi)\naxs[2].set_title(\"Feature Map\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\nfig.suptitle('Sample')\n\n# out-of-sample\nfig, axs = plt.subplots(1,3)\naxs[0].imshow(oos)\naxs[0].set_title(\"Original\")\naxs[1].imshow(k.transform_input(oos))\naxs[1].set_title(\"Transformed\")\nim = axs[2].imshow(k.phi(x=oos))\naxs[2].set_title(\"Feature Map\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\nfig.suptitle('Out-of-Sample')\n\n# kernel matrix\nfig, axs = plt.subplots(2,2)\nfig.suptitle('Kernel Matrix')\n\naxs[0,0].imshow(k.K, vmin=-1, vmax=1)\naxs[0,0].set_title(\"Sample - Sample\")\n\naxs[0,1].imshow(k.k(y=oos), vmin=-1, vmax=1)\naxs[0,1].set_title(\"Sample - OOS\")\n\naxs[1,0].imshow(k.k(x=oos), vmin=-1, vmax=1)\naxs[1,0].set_title(\"OOS - Sample\")\n\nim = axs[1,1].imshow(k.k(x=oos, y=oos), vmin=-1, vmax=1)\naxs[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist())",
      "names": [],
      "example": {
        "document": "kernel/abstract/explicit",
        "ref_id": "minimal-example",
        "headings": [
          "Explicit Kernel",
          "Defining a New Kernel",
          "Minimal Example"
        ]
      },
      "doc_lineno": 78
    },
    {
      "source": "import kerch\nimport torch\nimport numpy as np\n\n# we define our new kernel\nclass MyExplicit(kerch.kernel.Exponential):\n    def __init__(self, *args, **kwargs):\n        # all parameters are typically passed through the keyword arguments kwargs\n        degree = kwargs.pop('degree', 1)\n\n        # call to super\n        super(MyExplicit, self).__init__(*args, **kwargs)\n\n        # we ensure that is a torch value of the correct data type used by kerch (modifiable)\n        degree = kerch.utils.castf(degree, tensor=False)\n\n        # we now store it as a parameter, tu ensure that the values are ported over when changing the device\n        # ! due to the nature of PyTorch, parameters can only be added after the call to super.\n        self.degree = torch.nn.Parameter(degree, requires_grad=False)\n\n    def __str__(self):\n        # it is always nicer to add a name to the kernel (it must begin with small letters, the capitalization is automatic)\n        # this also has an influence on the __repr__ attribute\n        return \"my explicit kernel\"\n\n    @property\n    def dim_feature(self) -> int:\n        # it is more efficient to provide the feature dimension explicitly to avoid the model determining it on the\n        # running the explicit method on the sample, which is a rather useless computation\n        return 2 * self.dim_input + 1\n\n    @property\n    def hparams(self) -> dict():\n        # this returns a dictionary containing the properties\n        # it is important to call the super to also pass the other parameters like the sigma etc.\n        return {'Kernel': 'MyExplicit',\n                'Degree': self.degree.detach().cpu().item().numpy()\n                **super(MyExplicit, self).hparams}\n\n\n    def _explicit(self, x):\n        # x: torch.Tensor of size [num, self.dim_input]\n        phi1 = x                                                    # [num, self.dim_input]\n        phi2 = x ** self.degree                                     # [num, self.dim_input]\n        phi3 = torch.log(torch.sum(x * x, dim=1, keepdim=True)+1)   # [num, 1]\n\n        phi = torch.cat((phi1, phi2, phi3), dim=1)                  # [num, 2 * self.dim_input + 1]\n\n        # return torch.Tensor of size [num, self.dim_feature]\n        # self.dim_feature is provided so it will be deduced from the provided definition and not computed on the go\n        return phi",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "torch",
            "nn",
            "Parameter"
          ],
          "code_str": "torch.nn.Parameter",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "torch.nn.parameter.Parameter"
        },
        {
          "import_components": [
            "property"
          ],
          "code_str": "property",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "property"
        },
        {
          "import_components": [
            "int"
          ],
          "code_str": "int",
          "lineno": 27,
          "end_lineno": 27,
          "context": "none",
          "resolved_location": "int"
        },
        {
          "import_components": [
            "property"
          ],
          "code_str": "property",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "property"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 33,
          "end_lineno": 33,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "torch",
            "sum"
          ],
          "code_str": "torch.sum",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "torch.sum"
        },
        {
          "import_components": [
            "torch",
            "log"
          ],
          "code_str": "torch.log",
          "lineno": 45,
          "end_lineno": 45,
          "context": "none",
          "resolved_location": "torch.log"
        },
        {
          "import_components": [
            "torch",
            "cat"
          ],
          "code_str": "torch.cat",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "torch.cat"
        }
      ],
      "example": {
        "document": "kernel/abstract/explicit",
        "ref_id": "extensive-example",
        "headings": [
          "Explicit Kernel",
          "Defining a New Kernel",
          "Extensive Example"
        ]
      },
      "doc_lineno": 218
    }
  ],
  "kernel/abstract/implicit": [
    {
      "source": "import kerch\nimport torch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\n# we define our new kernel\nclass MyImplicit(kerch.kernel.Implicit):\n    def _implicit(self, x, y):\n        # x: torch.Tensor of size [num_x, self.dim_input]\n        # y: torch.Tensor of size [num_y, self.dim_input]\n\n        k = torch.log(x @ y.T + 1)\n\n        # return torch.Tensor of size [num_x, num_y]\n        return k\n\n# now we can just use the kernel\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\nk = MyImplicit(sample=sample)\n\nplt.figure()\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Kernel Matrix\")",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Implicit"
          ],
          "code_str": "kerch.kernel.Implicit",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.implicit.Implicit"
        },
        {
          "import_components": [
            "torch",
            "log"
          ],
          "code_str": "torch.log",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "torch.log"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "expand_dims"
          ],
          "code_str": "np.expand_dims",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.expand_dims"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "cos"
          ],
          "code_str": "np.cos",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.cos"
        },
        {
          "import_components": [
            "numpy",
            "concatenate"
          ],
          "code_str": "np.concatenate",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "numpy.concatenate"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/abstract/implicit",
        "ref_id": "minimal-example",
        "headings": [
          "Implicit Kernel",
          "Defining a New Kernel",
          "Minimal Example"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "# we define the sample\nt = np.expand_dims(np.arange(0,15), axis=1)\nsample = np.concatenate((np.sin(t / np.pi) + 1, np.cos(t / np.pi) - 1), axis=1)\n\n# we also define an out_of_sample\nt_oos = np.expand_dims(np.arange(15,30), axis=1)\noos = np.concatenate((np.sin(t_oos / np.pi) + 1, np.cos(t_oos / np.pi) - 1), axis=1)\n\n# we initialize our new kernel\nk = MyImplicit(sample=sample, sample_transform=['minmax_rescaling'], kernel_transform=['center','normalize'])\n\n# sample\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(sample)\naxs[0].set_title(\"Original\")\nim = axs[1].imshow(k.current_sample_projected)\naxs[1].set_title(\"Transformed\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\nfig.suptitle('Sample')\n\n# out-of-sample\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(oos)\naxs[0].set_title(\"Original\")\nim = axs[1].imshow(k.transform_input(oos))\naxs[1].set_title(\"Transformed\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\nfig.suptitle('Out-of-Sample')\n\n# kernel matrix\nfig, axs = plt.subplots(2,2)\nfig.suptitle('Kernel Matrix')\n\naxs[0,0].imshow(k.K, vmin=-1, vmax=1)\naxs[0,0].set_title(\"Sample - Sample\")\n\naxs[0,1].imshow(k.k(y=oos), vmin=-1, vmax=1)\naxs[0,1].set_title(\"Sample - OOS\")\n\naxs[1,0].imshow(k.k(x=oos), vmin=-1, vmax=1)\naxs[1,0].set_title(\"OOS - Sample\")\n\nim = axs[1,1].imshow(k.k(x=oos, y=oos), vmin=-1, vmax=1)\naxs[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist())",
      "names": [],
      "example": {
        "document": "kernel/abstract/implicit",
        "ref_id": "minimal-example",
        "headings": [
          "Implicit Kernel",
          "Defining a New Kernel",
          "Minimal Example"
        ]
      },
      "doc_lineno": 65
    },
    {
      "source": "import kerch\nimport torch\nimport numpy as np\n\n# we define our new implicit kernel\nclass MyImplicit(kerch.kernel.Exponential):\n    def __init__(self, *args, **kwargs):\n        # all parameters are typically passed through the keyword arguments kwargs\n        a = kwargs.pop('a', 1)\n\n        # we assert that the value is positive because of the logarithm.\n        assert a > 0, 'The value for the parameter a must be strictly positive.'\n\n        # we ensure that is a torch value of the correct data type used by kerch (modifiable)\n        a = kerch.utils.castf(a, tensor=False)\n\n        # call to super\n        super(MyImplicit, self).__init__(*args, **kwargs)\n\n        # we now store it as a parameter, tu ensure that the values are ported over when changing the device\n        # ! due to the nature of PyTorch, parameters can only be added after the call to super.\n        self.a = torch.nn.Parameter(a, requires_grad=False)\n\n    def __str__(self):\n        # it is always nicer to add a name to the kernel (it must begin with small letters, the capitalization is automatic)\n        # this also has an influence on the __repr__ attribute\n        return \"my implicit kernel\"\n\n    @property\n    def hparams(self) -> dict():\n        # this returns a dictionary containing the properties\n        # it is important to call the super to also pass the other parameters like the sigma etc.\n        return {'Kernel': 'MyImplicit',\n                'Kernel parameter a': self.a.detach().cpu().item().numpy()\n                **super(MyExplicit, self).hparams}\n\n\n    def _implicit(self, x, y):\n        # x: torch.Tensor of size [num_x, self.dim_input]\n        # y: torch.Tensor of size [num_y, self.dim_input]\n\n        k = torch.log(x @ y.T + self.a)\n\n        # return torch.Tensor of size [num_x, num_y]\n        return k",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "torch",
            "nn",
            "Parameter"
          ],
          "code_str": "torch.nn.Parameter",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "torch.nn.parameter.Parameter"
        },
        {
          "import_components": [
            "property"
          ],
          "code_str": "property",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "property"
        },
        {
          "import_components": [
            "dict"
          ],
          "code_str": "dict",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "dict"
        },
        {
          "import_components": [
            "super"
          ],
          "code_str": "super",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "super"
        },
        {
          "import_components": [
            "torch",
            "log"
          ],
          "code_str": "torch.log",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "torch.log"
        }
      ],
      "example": {
        "document": "kernel/abstract/implicit",
        "ref_id": "extensive-example",
        "headings": [
          "Implicit Kernel",
          "Defining a New Kernel",
          "Extensive Example"
        ]
      },
      "doc_lineno": 201
    }
  ],
  "kernel/abstract/kernel": [],
  "kernel/all_kernels": [],
  "kernel/explicit": [],
  "kernel/generic/cosine": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\n\nk_cos = kerch.kernel.Cosine(sample=x)\nk_lin = kerch.kernel.Linear(sample=x, kernel_transform=['normalize'])\n\nfig, axs = plt.subplots(1, 2)\n\naxs[0].imshow(k_cos.K)\naxs[0].set_title(\"Cosine\")\n\nim = axs[1].imshow(k_lin.K)\naxs[1].set_title(\"Normalized Linear\")\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Cosine"
          ],
          "code_str": "kerch.kernel.Cosine",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.cosine.Cosine"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Cosine",
            "()"
          ],
          "code_str": "k_cos",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.cosine.Cosine"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Linear"
          ],
          "code_str": "kerch.kernel.Linear",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.linear.Linear"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Linear",
            "()"
          ],
          "code_str": "k_lin",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.linear.Linear"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/cosine",
        "ref_id": "connection-with-linear",
        "headings": [
          "Cosine Kernel",
          "Examples",
          "Connection with Linear"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nsin = np.expand_dims(np.sin(np.arange(50) / np.pi), axis=1)\nlog = np.expand_dims(np.sin(np.log(np.arange(50)+1)), axis=1)\n\nx1 = sin\nx2 = np.concatenate((sin,log), axis=1)\n\nk1 = kerch.kernel.Cosine(sample=x1)\nk2 = kerch.kernel.Cosine(sample=x2)\n\nfig, axs = plt.subplots(1, 2)\n\naxs[0].imshow(k1.K)\naxs[0].set_title(\"One Dimension\")\n\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Two Dimensions\")\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "expand_dims"
          ],
          "code_str": "np.expand_dims",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.expand_dims"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "expand_dims"
          ],
          "code_str": "np.expand_dims",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.expand_dims"
        },
        {
          "import_components": [
            "numpy",
            "concatenate"
          ],
          "code_str": "np.concatenate",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.concatenate"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Cosine"
          ],
          "code_str": "kerch.kernel.Cosine",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.cosine.Cosine"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Cosine",
            "()"
          ],
          "code_str": "k1",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.cosine.Cosine"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Cosine"
          ],
          "code_str": "kerch.kernel.Cosine",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.cosine.Cosine"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Cosine",
            "()"
          ],
          "code_str": "k2",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.cosine.Cosine"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/cosine",
        "ref_id": "multiple-dimensions",
        "headings": [
          "Cosine Kernel",
          "Examples",
          "Multiple Dimensions"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/generic/laplacian": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.Laplacian(sample=x)\n\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(f\"Sigma = {k.sigma:.2f}\")\n\nk.sigma = 2\n\nplt.figure(2)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(f\"Sigma = {k.sigma:.2f}\")",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian"
          ],
          "code_str": "kerch.kernel.Laplacian",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/generic/laplacian",
        "ref_id": "sine",
        "headings": [
          "Laplacian Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\n\n# automatic bandwidth with heuristic\nk_laplacian = kerch.kernel.Laplacian(sample=x)\nk_rbf = kerch.kernel.RBF(sample=x)\n\nfig1, axs1 = plt.subplots(1, 2)\n\naxs1[0].imshow(k_laplacian.K)\naxs1[0].set_title(f\"Laplacian ($\\sigma$={k_laplacian.sigma:.2f})\")\n\nim1 = axs1[1].imshow(k_rbf.K)\naxs1[1].set_title(f\"RBF ($\\sigma$={k_rbf.sigma:.2f})\")\n\nfig1.colorbar(im1, ax=axs1.ravel().tolist(), orientation='horizontal')\n\n#  unity bandwidth\nk_laplacian_sigma1 = kerch.kernel.Laplacian(sample=x, sigma=1)\nf_rbf_sigma1 = kerch.kernel.RBF(sample=x, sigma=1)\n\nfig2, axs2 = plt.subplots(1, 2)\n\naxs2[0].imshow(k_laplacian_sigma1.K)\naxs2[0].set_title(f\"Laplacian ($\\sigma$={k_laplacian_sigma1.sigma})\")\n\nim2 = axs2[1].imshow(f_rbf_sigma1.K)\naxs2[1].set_title(f\"RBF ($\\sigma$={f_rbf_sigma1.sigma})\")\n\nfig2.colorbar(im2, ax=axs2.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian"
          ],
          "code_str": "kerch.kernel.Laplacian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()"
          ],
          "code_str": "k_laplacian",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_rbf",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian"
          ],
          "code_str": "kerch.kernel.Laplacian",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()"
          ],
          "code_str": "k_laplacian_sigma1",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "f_rbf_sigma1",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/laplacian",
        "ref_id": "comparison-with-rbf",
        "headings": [
          "Laplacian Kernel",
          "Examples",
          "Comparison with RBF"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-5, 5, 200)\nk_rbf = kerch.kernel.RBF(sample=x, sigma=1)\nk_laplacian = kerch.kernel.Laplacian(sample=x, sigma=1)\nshape = torch.cat((k_rbf.k(y=0), k_laplacian.k(y=0)), dim=1)\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Kernel Shape')\nplt.legend(['RBF',\n            'Laplacian'])\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_rbf",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian"
          ],
          "code_str": "kerch.kernel.Laplacian",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()"
          ],
          "code_str": "k_laplacian",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "torch",
            "cat"
          ],
          "code_str": "torch.cat",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "torch.cat"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/generic/laplacian",
        "ref_id": "comparison-with-rbf",
        "headings": [
          "Laplacian Kernel",
          "Examples",
          "Comparison with RBF"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/generic/linear": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi) + 1.5\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.Linear(sample=x)\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Linear"
          ],
          "code_str": "kerch.kernel.Linear",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.linear.Linear"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Linear",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.linear.Linear"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "kernel/generic/linear",
        "ref_id": "sine",
        "headings": [
          "Linear Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/generic/nystrom": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nsample = np.sin(np.arange(0,15) / np.pi) + .1\noos = np.sin(np.arange(15,30) / np.pi) + .1\n\nk_base = kerch.kernel.RBF(sample=sample)\nk = kerch.kernel.Nystrom(base_kernel=k_base)\n\n# kernel matrix\nfig1, axs1 = plt.subplots(2,2)\nfig1.suptitle('Kernel Matrices of the Base Kernel (RBF)')\n\naxs1[0,0].imshow(k_base.K, vmin=0, vmax=1)\naxs1[0,0].set_title(\"Sample - Sample\")\n\naxs1[0,1].imshow(k_base.k(y=oos), vmin=0, vmax=1)\naxs1[0,1].set_title(\"Sample - OOS\")\n\naxs1[1,0].imshow(k_base.k(x=oos), vmin=0, vmax=1)\naxs1[1,0].set_title(\"OOS - Sample\")\n\nim1 = axs1[1,1].imshow(k_base.k(x=oos, y=oos), vmin=0, vmax=1)\naxs1[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs1.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig1.colorbar(im1, ax=axs1.ravel().tolist())\n\n# explicit feature map\nfig2, axs2 = plt.subplots(1,2)\nfig2.suptitle('Explicit Feature Maps (Nystrom)')\n\naxs2[0].imshow(k.Phi)\naxs2[0].set_title(\"Sample\")\n\nim2 = axs2[1].imshow(k.phi(x=oos))\naxs2[1].set_title(\"OOS\")\n\nfor ax in axs2.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig2.colorbar(im2, ax=axs2.ravel().tolist())\n\n# kernel matrix from the explicit feature map\nfig3, axs3 = plt.subplots(2,2)\nfig3.suptitle('Kernel Matrices from the Explicit Feature Map (Nystrom)')\n\naxs3[0,0].imshow(k.K, vmin=0, vmax=1)\naxs3[0,0].set_title(\"Sample - Sample\")\n\naxs3[0,1].imshow(k.k(y=oos), vmin=0, vmax=1)\naxs3[0,1].set_title(\"Sample - OOS\")\n\naxs3[1,0].imshow(k.k(x=oos), vmin=0, vmax=1)\naxs3[1,0].set_title(\"OOS - Sample\")\n\nim3 = axs3[1,1].imshow(k.k(x=oos, y=oos), vmin=0, vmax=1)\naxs3[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs3.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig3.colorbar(im3, ax=axs3.ravel().tolist())",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_base",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_base",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Nystrom"
          ],
          "code_str": "kerch.kernel.Nystrom",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.nystrom.Nystrom"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Nystrom",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.nystrom.Nystrom"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "explicit-rbf",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Explicit RBF"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nsample = np.sin(np.arange(0,15) / np.pi) + .1\noos = np.sin(np.arange(15,30) / np.pi) + .1\n\nk_base = kerch.kernel.RBF(sample=sample)\nk = kerch.kernel.Nystrom(base_kernel=k_base, dim=6)\n\n# kernel matrix\nfig1, axs1 = plt.subplots(2,2)\nfig1.suptitle('Kernel Matrices of the Base Kernel (RBF)')\n\naxs1[0,0].imshow(k_base.K, vmin=0, vmax=1)\naxs1[0,0].set_title(\"Sample - Sample\")\n\naxs1[0,1].imshow(k_base.k(y=oos), vmin=0, vmax=1)\naxs1[0,1].set_title(\"Sample - OOS\")\n\naxs1[1,0].imshow(k_base.k(x=oos), vmin=0, vmax=1)\naxs1[1,0].set_title(\"OOS - Sample\")\n\nim1 = axs1[1,1].imshow(k_base.k(x=oos, y=oos), vmin=0, vmax=1)\naxs1[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs1.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig1.colorbar(im1, ax=axs1.ravel().tolist())\n\n# explicit feature map\nfig2, axs2 = plt.subplots(1,2)\nfig2.suptitle('Explicit Feature Maps (Nystrom)')\n\naxs2[0].imshow(k.Phi)\naxs2[0].set_title(\"Sample\")\n\nim2 = axs2[1].imshow(k.phi(x=oos))\naxs2[1].set_title(\"OOS\")\n\nfor ax in axs2.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig2.colorbar(im2, ax=axs2.ravel().tolist())\n\n# kernel matrix from the explicit feature map\nfig3, axs3 = plt.subplots(2,2)\nfig3.suptitle('Kernel Matrices from the Explicit Feature Map (Nystrom)')\n\naxs3[0,0].imshow(k.K, vmin=0, vmax=1)\naxs3[0,0].set_title(\"Sample - Sample\")\n\naxs3[0,1].imshow(k.k(y=oos), vmin=0, vmax=1)\naxs3[0,1].set_title(\"Sample - OOS\")\n\naxs3[1,0].imshow(k.k(x=oos), vmin=0, vmax=1)\naxs3[1,0].set_title(\"OOS - Sample\")\n\nim3 = axs3[1,1].imshow(k.k(x=oos, y=oos), vmin=0, vmax=1)\naxs3[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs3.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig3.colorbar(im3, ax=axs3.ravel().tolist())",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_base",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_base",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Nystrom"
          ],
          "code_str": "kerch.kernel.Nystrom",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.nystrom.Nystrom"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Nystrom",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.nystrom.Nystrom"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 34,
          "end_lineno": 34,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 50,
          "end_lineno": 50,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "effect-of-the-dimension",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Effect of the dimension"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "k_base = kerch.kernel.RBF(sample=sample)\nk = kerch.kernel.Nystrom(base_kernel=k_base)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 184
    },
    {
      "source": "k_base = kerch.kernel.RBF(sample=sample)\nk = kerch.kernel.factory(kernel_type='nystrom', base_kernel=k_base)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 190
    },
    {
      "source": "k_base = kerch.kernel.factory(kernel_type='rbf')\nk = kerch.kernel.Nystrom(base_kernel=k_base)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 196
    },
    {
      "source": "k = kerch.kernel.factory(kernel_type='nystrom', base_type='rbf', sample=sample)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 202
    },
    {
      "source": "k_base = kerch.kernel.RBF(sample=sample, sigma=2)\nk = kerch.kernel.Nystrom(base_kernel=k_base, dim=3)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 209
    },
    {
      "source": "k_base = kerch.kernel.RBF(sample=sample, sigma=2)\nk = kerch.kernel.factory(kernel_type='nystrom', base_kernel=k_base, dim=3)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 215
    },
    {
      "source": "k_base = kerch.kernel.factory(kernel_type='rbf', sample=sample, sigma=2)\nk = kerch.kernel.Nystrom(base_kernel=k_base, dim=3)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 221
    },
    {
      "source": "k = kerch.kernel.factory(kernel_type='nystrom', base_type='rbf', sample=sample, sigma=2, dim=3)",
      "names": [],
      "example": {
        "document": "kernel/generic/nystrom",
        "ref_id": "factory",
        "headings": [
          "Nystr\u00f6m Kernel",
          "Example",
          "Factory"
        ]
      },
      "doc_lineno": 227
    }
  ],
  "kernel/generic/polynomial": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi) + 1.5\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.Polynomial(sample=x)\nplt.figure(1)\nplt.imshow(k.K)\nplt.title(f\"Alpha = {k.alpha}, Beta = {k.beta}\")\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "kernel/generic/polynomial",
        "ref_id": "sine",
        "headings": [
          "Polynomial Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\n\nk1 = kerch.kernel.Polynomial(sample=x, alpha=2, beta=1)\nk2 = kerch.kernel.Polynomial(sample=x, alpha=2, beta=5)\nk3 = kerch.kernel.Polynomial(sample=x, alpha=5, beta=1)\nk4 = kerch.kernel.Polynomial(sample=x, alpha=5, beta=5)\n\nfig, axs = plt.subplots(2, 2)\n\naxs[0,0].imshow(k1.K)\naxs[0,0].set_title(f\"Alpha = {k1.alpha}, Beta = {k1.beta}\")\n\naxs[0,1].imshow(k2.K)\naxs[0,1].set_title(f\"Alpha = {k2.alpha}, Beta = {k2.beta}\")\n\naxs[1,0].imshow(k3.K)\naxs[1,0].set_title(f\"Alpha = {k3.alpha}, Beta = {k3.beta}\")\n\nim = axs[1,1].imshow(k4.K)\naxs[1,1].set_title(f\"Alpha = {k4.alpha}, Beta = {k4.beta}\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k1",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k2",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k3",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k4",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/polynomial",
        "ref_id": "influence-of-the-parameters",
        "headings": [
          "Polynomial Kernel",
          "Examples",
          "Influence of the parameters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\n\nk1 = kerch.kernel.Polynomial(sample=x, alpha=2, beta=1, kernel_transform=['normalize'])\nk2 = kerch.kernel.Polynomial(sample=x, alpha=2, beta=5, kernel_transform=['normalize'])\nk3 = kerch.kernel.Polynomial(sample=x, alpha=5, beta=1, kernel_transform=['normalize'])\nk4 = kerch.kernel.Polynomial(sample=x, alpha=5, beta=5, kernel_transform=['normalize'])\n\nfig, axs = plt.subplots(2, 2)\n\naxs[0,0].imshow(k1.K)\naxs[0,0].set_title(f\"Alpha = {k1.alpha}, Beta = {k1.beta}\")\n\naxs[0,1].imshow(k2.K)\naxs[0,1].set_title(f\"Alpha = {k2.alpha}, Beta = {k2.beta}\")\n\naxs[1,0].imshow(k3.K)\naxs[1,0].set_title(f\"Alpha = {k3.alpha}, Beta = {k3.beta}\")\n\nim = axs[1,1].imshow(k4.K)\naxs[1,1].set_title(f\"Alpha = {k4.alpha}, Beta = {k4.beta}\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k1",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k2",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k3",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k4",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/polynomial",
        "ref_id": "influence-of-the-parameters",
        "headings": [
          "Polynomial Kernel",
          "Examples",
          "Influence of the parameters"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum, dim_input = 10,3\n\nx = torch.randn(num, dim_input)\noos = torch.randn(num, dim_input)\n\nk = kerch.kernel.Polynomial(sample=x, alpha=3, kernel_transform=['center', 'normalize'])\n\nfig, axs = plt.subplots(2, 2)\n\naxs[0,0].imshow(k.k(explicit=True))\naxs[0,0].set_title(\"Explicit (sample)\")\n\naxs[0,1].imshow(k.k(explicit=False))\naxs[0,1].set_title(\"Implicit (sample)\")\n\naxs[1,0].imshow(k.k(x=oos, y=oos, explicit=True))\naxs[1,0].set_title(\"Implicit (out-of-sample)\")\n\nim = axs[1,1].imshow(k.k(x=oos, y=oos, explicit=False))\naxs[1,1].set_title(\"Explicit (out-of-sample)\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial"
          ],
          "code_str": "kerch.kernel.Polynomial",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Polynomial",
            "()"
          ],
          "code_str": "k",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.polynomial.Polynomial"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/polynomial",
        "ref_id": "explicit-and-implicit",
        "headings": [
          "Polynomial Kernel",
          "Examples",
          "Explicit and Implicit"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/generic/rbf": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.RBF(sample=x)\n\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Sigma = \"+str(k.sigma))\n\nk.sigma = 1\n\nplt.figure(2)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Sigma = \"+str(k.sigma))",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/generic/rbf",
        "ref_id": "sine",
        "headings": [
          "RBF Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nfrom matplotlib import pyplot as plt\n\nk = kerch.kernel.RBF(sample=range(10), sigma=3)\n\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"RBF with sigma \" + str(k.sigma))",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/generic/rbf",
        "ref_id": "time",
        "headings": [
          "RBF Kernel",
          "Examples",
          "Time"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/generic/rff": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\n\nk_rbf = kerch.kernel.RBF(sample=x, sigma=1)\nk_rff = kerch.kernel.RFF(sample=x, num_weights=50, sigma=1)\n\nfig, axs = plt.subplots(1, 2)\n\naxs[0].imshow(k_rbf.K)\naxs[0].set_title(\"RBF\")\n\nim = axs[1].imshow(k_rff.K)\naxs[1].set_title(\"RFF\")\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF"
          ],
          "code_str": "kerch.kernel.RBF",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RBF",
            "()"
          ],
          "code_str": "k_rbf",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.rbf.RBF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RFF"
          ],
          "code_str": "kerch.kernel.RFF",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.random_features.rff.RFF"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "RFF",
            "()"
          ],
          "code_str": "k_rff",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.random_features.rff.RFF"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/generic/rff",
        "ref_id": "sine",
        "headings": [
          "Random Fourier Features Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/generic/sigmoid": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi) + 1.5\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.Sigmoid(sample=x)\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Sigmoid"
          ],
          "code_str": "kerch.kernel.Sigmoid",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.sigmoid.Sigmoid"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Sigmoid",
            "()"
          ],
          "code_str": "k",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.sigmoid.Sigmoid"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "kernel/generic/sigmoid",
        "ref_id": "sine",
        "headings": [
          "Sigmoid Kernel",
          "Example",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/implicit": [],
  "kernel/index": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nsample = np.sin(np.arange(0,15) / np.pi) + .1\noos = np.sin(np.arange(15,30) / np.pi) + .1\n\nk = kerch.kernel.factory(type=\"polynomial\", sample=sample, center=True, normalize=True)\n\nfig, axs = plt.subplots(2,2)\n\naxs[0,0].imshow(k.K, vmin=-1, vmax=1)\naxs[0,0].set_title(\"Sample - Sample\")\n\naxs[0,1].imshow(k.k(y=oos), vmin=-1, vmax=1)\naxs[0,1].set_title(\"Sample - OOS\")\n\naxs[1,0].imshow(k.k(x=oos), vmin=-1, vmax=1)\naxs[1,0].set_title(\"OOS - Sample\")\n\nim = axs[1,1].imshow(k.k(x=oos, y=oos), vmin=-1, vmax=1)\naxs[1,1].set_title(\"OOS - OOS\")\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])\n\nfig.colorbar(im, ax=axs.ravel().tolist())",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "factory"
          ],
          "code_str": "kerch.kernel.factory",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.factory"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "factory",
            "()"
          ],
          "code_str": "k",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.kernel.Kernel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/index",
        "ref_id": "examples",
        "headings": [
          "Kernel Module",
          "Examples"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/network/explicit_nn": [],
  "kernel/network/implicit_nn": [],
  "kernel/nystrom": [],
  "kernel/statistics/epanechnikov": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-1.2, 1.2, 100)\nk = kerch.kernel.Epanechnikov(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Epanechnikov Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov"
          ],
          "code_str": "kerch.kernel.Epanechnikov",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.epanechnikov.Epanechnikov"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.epanechnikov.Epanechnikov"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/epanechnikov",
        "ref_id": "shape",
        "headings": [
          "Epanechnikov (parabolic) Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Epanechnikov(sample=sample, sigma=3)\nk2 = kerch.kernel.Epanechnikov(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Epanechnikov (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Epanechnikov (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov"
          ],
          "code_str": "kerch.kernel.Epanechnikov",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.epanechnikov.Epanechnikov"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.epanechnikov.Epanechnikov"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov"
          ],
          "code_str": "kerch.kernel.Epanechnikov",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.epanechnikov.Epanechnikov"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Epanechnikov",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.epanechnikov.Epanechnikov"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/epanechnikov",
        "ref_id": "random",
        "headings": [
          "Epanechnikov (parabolic) Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/exponential": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-5, 5, 200)\nk_squared = kerch.kernel.Exponential(sample=x, sigma=1)                     # same as RBF kernel\nk_non_squared = kerch.kernel.Exponential(sample=x, sigma=1, squared=False)  # same as Laplacian kernel\nshape = torch.cat((k_squared.k(y=0), k_non_squared.k(y=0)), dim=1)\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Exponential Shape')\nplt.legend(['Squared (default)', 'Non-Squared'])\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential",
            "()"
          ],
          "code_str": "k_squared",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential",
            "()"
          ],
          "code_str": "k_non_squared",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "torch",
            "cat"
          ],
          "code_str": "torch.cat",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "torch.cat"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/exponential",
        "ref_id": "shape",
        "headings": [
          "Exponential Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Exponential(sample=sample, sigma=3)\nk2 = kerch.kernel.Exponential(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Exponential (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Exponential (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential"
          ],
          "code_str": "kerch.kernel.Exponential",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Exponential",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.exponential.Exponential"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/exponential",
        "ref_id": "random",
        "headings": [
          "Exponential Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/logistic": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-5, 5, 100)\nk = kerch.kernel.Logistic(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Logistic Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic"
          ],
          "code_str": "kerch.kernel.Logistic",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.logistic.Logistic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.logistic.Logistic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/logistic",
        "ref_id": "shape",
        "headings": [
          "Logistic Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Logistic(sample=sample, sigma=3)\nk2 = kerch.kernel.Logistic(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Logistic (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Logistic (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic"
          ],
          "code_str": "kerch.kernel.Logistic",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.logistic.Logistic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.logistic.Logistic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic"
          ],
          "code_str": "kerch.kernel.Logistic",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.logistic.Logistic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Logistic",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.logistic.Logistic"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/logistic",
        "ref_id": "random",
        "headings": [
          "Logistic Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/quartic": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-1.2, 1.2, 100)\nk = kerch.kernel.Quartic(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Quartic Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic"
          ],
          "code_str": "kerch.kernel.Quartic",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.quartic.Quartic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.quartic.Quartic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/quartic",
        "ref_id": "shape",
        "headings": [
          "Quartic (biweight) Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Quartic(sample=sample, sigma=3)\nk2 = kerch.kernel.Quartic(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Quartic (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Quartic (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic"
          ],
          "code_str": "kerch.kernel.Quartic",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.quartic.Quartic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.quartic.Quartic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic"
          ],
          "code_str": "kerch.kernel.Quartic",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.quartic.Quartic"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Quartic",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.quartic.Quartic"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/quartic",
        "ref_id": "random",
        "headings": [
          "Quartic (biweight) Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/silverman": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-6, 6, 100)\nk = kerch.kernel.Silverman(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Silverman Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman"
          ],
          "code_str": "kerch.kernel.Silverman",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.silverman.Silverman"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.silverman.Silverman"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/silverman",
        "ref_id": "shape",
        "headings": [
          "Silverman Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Silverman(sample=sample, sigma=3)\nk2 = kerch.kernel.Silverman(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Silverman (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Silverman (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman"
          ],
          "code_str": "kerch.kernel.Silverman",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.silverman.Silverman"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.silverman.Silverman"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman"
          ],
          "code_str": "kerch.kernel.Silverman",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.silverman.Silverman"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Silverman",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.silverman.Silverman"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/silverman",
        "ref_id": "random",
        "headings": [
          "Silverman Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/triangular": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-1.2, 1.2, 100)\nk = kerch.kernel.Triangular(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Triangular Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular"
          ],
          "code_str": "kerch.kernel.Triangular",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triangular.Triangular"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triangular.Triangular"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/triangular",
        "ref_id": "shape",
        "headings": [
          "Triangular Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Triangular(sample=sample, sigma=3)\nk2 = kerch.kernel.Triangular(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Triangular (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Triangular (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular"
          ],
          "code_str": "kerch.kernel.Triangular",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triangular.Triangular"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triangular.Triangular"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular"
          ],
          "code_str": "kerch.kernel.Triangular",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triangular.Triangular"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triangular",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triangular.Triangular"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/triangular",
        "ref_id": "random",
        "headings": [
          "Triangular Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/tricube": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-1.2, 1.2, 100)\nk = kerch.kernel.Tricube(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Tricube Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube"
          ],
          "code_str": "kerch.kernel.Tricube",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.tricube.Tricube"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.tricube.Tricube"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/tricube",
        "ref_id": "shape",
        "headings": [
          "Tricube Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Tricube(sample=sample, sigma=3)\nk2 = kerch.kernel.Tricube(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Tricube (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Tricube (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube"
          ],
          "code_str": "kerch.kernel.Tricube",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.tricube.Tricube"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.tricube.Tricube"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube"
          ],
          "code_str": "kerch.kernel.Tricube",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.tricube.Tricube"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Tricube",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.tricube.Tricube"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/tricube",
        "ref_id": "random",
        "headings": [
          "Tricube Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/triweight": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-1.2, 1.2, 100)\nk = kerch.kernel.Triweight(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Triweight Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight"
          ],
          "code_str": "kerch.kernel.Triweight",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/triweight",
        "ref_id": "shape",
        "headings": [
          "Triweight Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Triweight(sample=sample, sigma=3)\nk2 = kerch.kernel.Triweight(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Triweight (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Triweight (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight"
          ],
          "code_str": "kerch.kernel.Triweight",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight"
          ],
          "code_str": "kerch.kernel.Triweight",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/triweight",
        "ref_id": "random",
        "headings": [
          "Triweight Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/statistics/uniform": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nx = torch.linspace(-1.2, 1.2, 100)\nk = kerch.kernel.Uniform(sample=x, sigma=1)\nshape = k.k(y=0).squeeze()\n\nplt.figure()\nplt.plot(x, shape)\nplt.title('Uniform Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform"
          ],
          "code_str": "kerch.kernel.Uniform",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.uniform.Uniform"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform",
            "()"
          ],
          "code_str": "k",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.uniform.Uniform"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 7,
          "end_lineno": 7,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        }
      ],
      "example": {
        "document": "kernel/statistics/uniform",
        "ref_id": "shape",
        "headings": [
          "Uniform (window) Kernel",
          "Example",
          "Shape"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\nnum_input, dim_input = 20, 5\nsample = torch.randn(num_input, dim_input)\n\nk1 = kerch.kernel.Uniform(sample=sample, sigma=3)\nk2 = kerch.kernel.Uniform(sample=sample, distance='chebyshev', sigma=3)\n\nfig, axs = plt.subplots(1,2)\naxs[0].imshow(k1.K)\naxs[0].set_title(\"Uniform (Euclidean)\")\nim = axs[1].imshow(k2.K)\naxs[1].set_title(\"Uniform (Chebyshev)\")\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')\n\nfor ax in axs.flat:\n    ax.set_xticks([])\n    ax.set_yticks([])",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "randn"
          ],
          "code_str": "torch.randn",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.randn"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform"
          ],
          "code_str": "kerch.kernel.Uniform",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.uniform.Uniform"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform",
            "()"
          ],
          "code_str": "k1",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.uniform.Uniform"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform"
          ],
          "code_str": "kerch.kernel.Uniform",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.uniform.Uniform"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Uniform",
            "()"
          ],
          "code_str": "k2",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.uniform.Uniform"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/statistics/uniform",
        "ref_id": "random",
        "headings": [
          "Uniform (window) Kernel",
          "Example",
          "Random"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/time/hat": [
    {
      "source": "import kerch\nfrom matplotlib import pyplot as plt\n\nk = kerch.kernel.Hat(sample=range(10), lag=3)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Hat with lag \" + str(k.lag))",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Hat"
          ],
          "code_str": "kerch.kernel.Hat",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.time.hat.Hat"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Hat",
            "()"
          ],
          "code_str": "k",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.time.hat.Hat"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/time/hat",
        "ref_id": "linear-time",
        "headings": [
          "Hat Kernel",
          "Examples",
          "Linear (Time)"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/time/indicator": [
    {
      "source": "import kerch\nfrom matplotlib import pyplot as plt\n\nk = kerch.kernel.Indicator(sample=range(10), lag=3)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Indicator with lag \" + str(k.lag))",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Indicator"
          ],
          "code_str": "kerch.kernel.Indicator",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.time.indicator.Indicator"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Indicator",
            "()"
          ],
          "code_str": "k",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "kerch.kernel.time.indicator.Indicator"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/time/indicator",
        "ref_id": "linear-time",
        "headings": [
          "Indicator Kernel",
          "Examples",
          "Linear (Time)"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/vision/additive_chi2": [],
  "kernel/vision/skewed_chi2": [],
  "level/index": [],
  "level/kpca": [],
  "level/lssvm": [],
  "level/mvkpca": [],
  "level/ppca": [],
  "level/ridge": [],
  "methods/index": [],
  "methods/iterative": [],
  "methods/knn": [],
  "methods/smoother": [
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\n# data\nfun = lambda x: torch.sin(x ** 2)\n\nx_equal = torch.linspace(0, 2, 100)\nx_nonequal = 2 * torch.sort(torch.rand(40)).values\n\ny_original = fun(x_equal)\ny_noisy = fun(x_nonequal) + .2 * torch.randn_like(x_nonequal)\n\nplt.plot(x_equal, y_original, label=\"Original Data\", color=\"black\", linestyle='dotted')\nplt.scatter(x_nonequal, y_noisy, label=\"Noisy Data\", color=\"black\")\n\n# kernels\nkernels = [('RBF', 'red'),\n           ('Laplacian', 'orange'),\n           ('Logistic', 'olive'),\n           ('Epanechnikov', 'gold'),\n           ('Quartic', 'chartreuse'),\n           ('Silverman', 'green'),\n           ('Triangular', 'teal'),\n           ('Tricube', 'cyan'),\n           ('Triweight', 'royalblue'),\n           ('Uniform', 'purple')]\n\n# kernel smoother\nfor name, c in kernels:\n    y_reconstructed = kerch.method.kernel_smoother(domain=x_nonequal, observations=y_noisy, kernel_type=name.lower())\n    plt.plot(x_nonequal, y_reconstructed, label=name, color=c)\n\n# plot\nplt.title('Kernel Smoothing')\nplt.xlabel('x')\nplt.ylabel('y')\nplt.legend(loc='lower center', ncol=3)",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "sin"
          ],
          "code_str": "torch.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.sin"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "torch",
            "rand"
          ],
          "code_str": "torch.rand",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "torch.rand"
        },
        {
          "import_components": [
            "torch",
            "sort"
          ],
          "code_str": "torch.sort",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "torch.sort"
        },
        {
          "import_components": [
            "torch",
            "randn_like"
          ],
          "code_str": "torch.randn_like",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "torch.randn_like"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "scatter"
          ],
          "code_str": "plt.scatter",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.scatter"
        },
        {
          "import_components": [
            "kerch",
            "method",
            "kernel_smoother"
          ],
          "code_str": "kerch.method.kernel_smoother",
          "lineno": 31,
          "end_lineno": 31,
          "context": "none",
          "resolved_location": "kerch.method.kernel_smoother"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 32,
          "end_lineno": 32,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 36,
          "end_lineno": 36,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 37,
          "end_lineno": 37,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 38,
          "end_lineno": 38,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        }
      ],
      "example": {
        "document": "methods/smoother",
        "ref_id": "different-kernels-same-bandwidth",
        "headings": [
          "Kernel Smoother",
          "Example",
          "Different Kernels, Same Bandwidth"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\n# domain\nx = torch.linspace(-3, 3, 500)\n\n# define the kernels\nk_l1 = kerch.kernel.Laplacian(sample=x, sigma=1)\nk_l2 = kerch.kernel.Laplacian(sample=x, sigma=2)\nk_t1 = kerch.kernel.Triweight(sample=x, sigma=1)\nk_t2 = kerch.kernel.Triweight(sample=x, sigma=2)\n\n# plot the shapes\nplt.plot(x, k_l1.k(y=0).squeeze(), label=f\"Laplacian with $\\sigma$={k_l1.sigma}\", color='black')\nplt.plot(x, k_l2.k(y=0).squeeze(), label=f\"Laplacian with $\\sigma$={k_l2.sigma}\", color='black', linestyle='dashed')\nplt.plot(x, k_t1.k(y=0).squeeze(), label=f\"Triweight with $\\sigma$={k_t1.sigma}\", color='red')\nplt.plot(x, k_t2.k(y=0).squeeze(), label=f\"Triweight with $\\sigma$={k_t2.sigma}\", color='red', linestyle='dashed')\n\n# annotate the plot\nplt.title('Kernel Shape')\nplt.xlabel('x')\nplt.ylabel('k(x,y=0)')\nplt.ylim(-.25, 1.1)\nplt.legend(loc='lower center', ncol=2)",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian"
          ],
          "code_str": "kerch.kernel.Laplacian",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()"
          ],
          "code_str": "k_l1",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian"
          ],
          "code_str": "kerch.kernel.Laplacian",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()"
          ],
          "code_str": "k_l2",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "kerch.kernel.generic.laplacian.Laplacian"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight"
          ],
          "code_str": "kerch.kernel.Triweight",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()"
          ],
          "code_str": "k_t1",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight"
          ],
          "code_str": "kerch.kernel.Triweight",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()"
          ],
          "code_str": "k_t2",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "kerch.kernel.statistics.triweight.Triweight"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 15,
          "end_lineno": 15,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Laplacian",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 16,
          "end_lineno": 16,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 16,
          "end_lineno": 16,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 17,
          "end_lineno": 17,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "kerch",
            "kernel",
            "Triweight",
            "()",
            "k",
            "()",
            "squeeze"
          ],
          "code_str": "squeeze",
          "lineno": 18,
          "end_lineno": 18,
          "context": "after_call",
          "resolved_location": "torch.Tensor.squeeze"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "xlabel"
          ],
          "code_str": "plt.xlabel",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.xlabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylabel"
          ],
          "code_str": "plt.ylabel",
          "lineno": 23,
          "end_lineno": 23,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylabel"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "ylim"
          ],
          "code_str": "plt.ylim",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.ylim"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "legend"
          ],
          "code_str": "plt.legend",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.legend"
        }
      ],
      "example": {
        "document": "methods/smoother",
        "ref_id": "same-kernels-different-bandwidths",
        "headings": [
          "Kernel Smoother",
          "Example",
          "Same Kernels, Different Bandwidths"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nimport torch\nfrom matplotlib import pyplot as plt\n\n# data\nfun = lambda x: torch.sin(x ** 2)\n\nx_equal = torch.linspace(0, 2, 100)\nx_nonequal = 2 * torch.sort(torch.rand(40)).values\n\ny_original = fun(x_equal)\ny_noisy = fun(x_nonequal) + .2 * torch.randn_like(x_nonequal)\n\n# plot\nfig, axs = plt.subplots(1, 2)\nfor ax in axs.flatten():\n    ax.plot(x_equal, y_original, label=\"Original Data\", color=\"black\", linestyle='dotted')\n    ax.scatter(x_nonequal, y_noisy, label=\"Noisy Data\", color=\"black\")\n    plt.title('Kernel Smoothing')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n# kernel smoother\nsigmas = [(0.05, 'red'),\n          (0.2, 'green'),\n          (0.5, 'cyan'),\n          (1.0, 'purple')]\nfor s, c in sigmas:\n    y_laplacian = kerch.method.kernel_smoother(domain=x_nonequal, observations=y_noisy, kernel_type='laplacian', sigma=s)\n    y_triweight = kerch.method.kernel_smoother(domain=x_nonequal, observations=y_noisy, kernel_type='triweight', sigma=s)\n    axs[0].plot(x_nonequal, y_laplacian, color=c, label=f\"Bandwidth $\\sigma$={s}\")\n    axs[1].plot(x_nonequal, y_triweight, color=c)\n\n# plot\nfig.suptitle('Kernel Smoothing')\naxs[0].set_title('Laplacian')\naxs[1].set_title('Triweight')\nfig.legend(*axs[0].get_legend_handles_labels(), loc='lower center', ncol=3)",
      "names": [
        {
          "import_components": [
            "torch"
          ],
          "code_str": "torch",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "torch"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "torch",
            "sin"
          ],
          "code_str": "torch.sin",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "torch.sin"
        },
        {
          "import_components": [
            "torch",
            "linspace"
          ],
          "code_str": "torch.linspace",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "torch.linspace"
        },
        {
          "import_components": [
            "torch",
            "rand"
          ],
          "code_str": "torch.rand",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "torch.rand"
        },
        {
          "import_components": [
            "torch",
            "sort"
          ],
          "code_str": "torch.sort",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "torch.sort"
        },
        {
          "import_components": [
            "torch",
            "randn_like"
          ],
          "code_str": "torch.randn_like",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "torch.randn_like"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "kerch",
            "method",
            "kernel_smoother"
          ],
          "code_str": "kerch.method.kernel_smoother",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "kerch.method.kernel_smoother"
        },
        {
          "import_components": [
            "kerch",
            "method",
            "kernel_smoother"
          ],
          "code_str": "kerch.method.kernel_smoother",
          "lineno": 30,
          "end_lineno": 30,
          "context": "none",
          "resolved_location": "kerch.method.kernel_smoother"
        }
      ],
      "example": {
        "document": "methods/smoother",
        "ref_id": "same-kernels-different-bandwidths",
        "headings": [
          "Kernel Smoother",
          "Example",
          "Same Kernels, Different Bandwidths"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "model/index": [],
  "model/lssvm": [],
  "structure/index": [],
  "views/index": [],
  "index": [],
  "modules": [],
  "general/utils": [],
  "kernel/additive_chi2": [],
  "kernel/base": [],
  "kernel/cosine": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi) + 1.5\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.cosine(sample=x, center=True)\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "kernel/cosine",
        "ref_id": "sine",
        "headings": [
          "Cosine Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/explicit_nn": [],
  "kernel/exponential": [],
  "kernel/hat": [
    {
      "source": "import kerch\nfrom matplotlib import pyplot as plt\n\nk = kerch.kernel.hat(sample=range(10), lag=3)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Hat with lag \" + str(k.lag))",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/hat",
        "ref_id": "linear-time",
        "headings": [
          "Hat Kernel",
          "Examples",
          "Linear (Time)"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/implicit_nn": [],
  "kernel/indicator": [
    {
      "source": "import kerch\nfrom matplotlib import pyplot as plt\n\nk = kerch.kernel.indicator(sample=range(10), lag=3)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Indicator with lag \" + str(k.lag))",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/indicator",
        "ref_id": "linear-time",
        "headings": [
          "Indicator Kernel",
          "Examples",
          "Linear (Time)"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/laplacian": [],
  "kernel/linear": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi) + 1.5\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.linear(sample=x)\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "kernel/linear",
        "ref_id": "sine",
        "headings": [
          "Linear Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/polynomial": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.polynomial(sample=x, degree=2)\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        }
      ],
      "example": {
        "document": "kernel/polynomial",
        "ref_id": "sine",
        "headings": [
          "Polynomial Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/rbf": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\nplt.figure(0)\nplt.plot(x)\n\nk = kerch.kernel.rbf(sample=x)\n\nplt.figure(1)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Sigma = \"+str(k.sigma))\n\nk.sigma = 1\n\nplt.figure(2)\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"Sigma = \"+str(k.sigma))",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "figure"
          ],
          "code_str": "plt.figure",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.figure"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 20,
          "end_lineno": 20,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/rbf",
        "ref_id": "sine",
        "headings": [
          "RBF Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    },
    {
      "source": "import kerch\nfrom matplotlib import pyplot as plt\n\nk = kerch.kernel.rbf(sample=range(10), sigma=3)\n\nplt.imshow(k.K)\nplt.colorbar()\nplt.title(\"RBF with sigma \" + str(k.sigma))",
      "names": [
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "range"
          ],
          "code_str": "range",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "range"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "imshow"
          ],
          "code_str": "plt.imshow",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.imshow"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "colorbar"
          ],
          "code_str": "plt.colorbar",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.colorbar"
        },
        {
          "import_components": [
            "str"
          ],
          "code_str": "str",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "str"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "title"
          ],
          "code_str": "plt.title",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.title"
        }
      ],
      "example": {
        "document": "kernel/rbf",
        "ref_id": "time",
        "headings": [
          "RBF Kernel",
          "Examples",
          "Time"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/rff": [
    {
      "source": "import kerch\nimport numpy as np\nfrom matplotlib import pyplot as plt\n\nx = np.sin(np.arange(50) / np.pi)\n\nk_rbf = kerch.kernel.rbf(sample=x, sigma=1)\nk_rff = kerch.kernel.rff(sample=x, num_weights=50)\n\nfig, axs = plt.subplots(1, 2)\n\naxs[0].imshow(k_rbf.K)\naxs[0].set_title(\"RBF\")\n\nim = axs[1].imshow(k_rff.K)\naxs[1].set_title(\"RFF\")\n\nfig.colorbar(im, ax=axs.ravel().tolist(), orientation='horizontal')",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib"
          ],
          "code_str": "matplotlib",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_from",
          "resolved_location": "matplotlib"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "pyplot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "sin"
          ],
          "code_str": "np.sin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sin"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        }
      ],
      "example": {
        "document": "kernel/rff",
        "ref_id": "sine",
        "headings": [
          "Random Fourier Features Kernel",
          "Examples",
          "Sine"
        ]
      },
      "doc_lineno": 2
    }
  ],
  "kernel/sigmoid": [],
  "kernel/skewed_chi2": []
}